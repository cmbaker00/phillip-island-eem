## R code for simulating interaction networks
# Scale parameters for hyper distributions
mu.interaction <- 2 # mean interaction probability ; or -2.5 (for low)
sd.interaction <- 1 # standard deviation of interaction probability ;
mu.abund <- 0 # mean abundance of dependent or 0 (for low)
sd.abund <- 1 # standard deviation of abundance of dependent
# Dimensions of simulated networks
n.dep <- 10 # number of dependent species
n.host <- 5 # host species
n.coll <- 20 # number of observations per host species
#dep.sp <- rep(1: n.dep, each = n.host * n.coll)
#host.sp<- rep(rep(1: n.host, each = n.coll), times = n.dep)
coll <- rep(1: n.coll, rep((n.dep *n.host), n.coll))
Nobs <- n.dep * n.host * n.coll
# Attributes of species
crlla.lngth <- rep(NA, n.host)
probe.lngth <- rep(NA, n.dep)
trait.match <- rep(NA, times = (n.dep *n.host))
# Create empty vectors
abund <- rep(NA, times = n.dep) # mean abund of dependent spp
interaction.prob <- rep(NA, n.host *(n.dep)) # mean interaction on logit scale
x <- rep(NA, times = (n.dep *n.host)) # Pr(nteraction) : inv logit of interaction.prob
x1 <- rep(NA, times = (n.host *n.dep)) # binary interaction indicator
host.sp.ind <- rep(NA, times = (n.host *n.dep)) # track host species identity
dep.sp.ind <- rep(NA, times = (n.host *n.dep)) # tracks dependent species identity
interaction <- rep(NA, times = n.dep *n.host *n.coll) # realised interaction
exp.abund <- rep(NA, times = n.dep *n.host *n.coll) # expected abundance
host.sp.count.ind <- rep(NA, times = n.dep *n.host *n.coll)
dep.sp.cnt.ind <- rep(NA, times = n.dep *n.host * n.coll)
# Data simulation
for (l in 1:n.host) {
crlla.lngth[l] <- rnorm(1)  # set corrola length for trait matching
}
for (i in 1:n.dep) {
probe.lngth[i] <- rnorm(1)   # set proboscis length for trait matching
abund[i] <- rnorm(1, mean = mu.abund, sd = sd.abund)
for (l in 1:n.host) {
trait.match[i + (l - 1) * n.dep ] <- crlla.lngth[l] > probe.lngth[i]
interaction.prob[i + (l - 1) * n.dep] <-  rnorm(1, mean = mu.interaction , sd = sd.interaction )
x[i + (l - 1) * n.dep ] <- trait.match[i + (l - 1) * n.dep ] * exp(interaction.prob[i+(l - 1) * n.dep]) / (1 + exp(interaction.prob[i + (l - 1) * n.dep]))  ## this is a simple binary match of traits
x1[i + (l - 1) * n.dep] <- rbinom(1, 1, x[i + (l - 1) * n.dep])
dep.sp.ind[i + (l - 1) * n.dep] <- i
host.sp.ind[i + (l - 1) * n.dep] <- l
for (m in 1:n.coll) {
interaction[i + (l - 1) * n.dep + (m - 1) * n.host * n.dep] <- x1[i + (l - 1) * n.dep]
exp.abund[i + (l - 1) * n.dep + (m - 1) * n.host * n.dep] <- rpois(1, lambda = exp(abund[i]))
dep.sp.cnt.ind[i + (l - 1) * n.dep + (m - 1) * n.host * n.dep] <- i
host.sp.count.ind[i + (l - 1) * n.dep + (m - 1) * n.host * n.dep] <- l
}
}
count <- exp.abund * interaction
}
trait.match
crlla.lngth
probe.lngth
crlla.lngth[l] > probe.lngth[i]
rnorm(1, mean = mu.interaction , sd = sd.interaction )
crlla.lngth > probe.lngth
trait.match[1]
interaction.prob[1]
trait.match[1]*exp(interaction.prob) / (1+exp(interaction.prob))
trait.match*exp(interaction.prob) / (1+exp(interaction.prob))
trait.match
crlla.lngth[1]
probe.lngth[1]
probe.lngth
crlla.lngth[l]
crlla.lngth
?rnorm
rnorm(10)
rnorm(10, 0,1)
rnorm(10, 5 , 1)
rnorm(10, 5 , 2)
rnorm(10, 5 , 2)
rnorm(10, 5 , 2)
hist(rnorm(1000, 5 , 2))
hist(rnorm(10000, 5 , 2))
hist(rnorm(10000, 5 , 2)T(0,))
rnorm(10, 5 , 2)T(0,)
rtruncnorm(1, a=0, b=Inf, mean = 0, sd = 1)
?truncnorm
??truncnorm
install.packages("truncnorm", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
rtruncnorm(1, a=0, b=Inf, mean = 0, sd = 1)
library("truncnorm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
rtruncnorm(1, a=0, b=Inf, mean = 0, sd = 1)
hist(rtruncnorm(10000, a=0, b=Inf, mean = 0, sd = 1))
hist(rtruncnorm(10000, a=4, b=Inf, mean = 0, sd = 1))
hist(rtruncnorm(10000, a=0, b=Inf, mean = 4, sd = 1))
hist(rtruncnorm(10000, a=0, b=Inf, mean = 4, sd = 2))
hist(rtruncnorm(10000, a=0, b=Inf, mean = 5, sd = 2))
TRUE
trait.match[1]
trait.match[1]*5
TRUE*5
count
library(R2jags)
inits = function() {
a0Guess = runif(1, .05,.4)
b0Guess = runif(1, .25,1)
sigma.aGuess =  runif(1,0,1.5) # uninformativ prior restricted to the range of 0 and 1.5 - why so low?
sigma.bGuess =  runif(1,0,1.5) # uninformativ prior restricted to the range of 0 and 1.5 - why so low?
list(alpha.mean=a0Guess, beta.mean=b0Guess,
sigma.a=sigma.aGuess, sigma.b=sigma.bGuess,
alpha=matrix(rnorm((n.dep* n.host), log(a0Guess/(1-a0Guess)), sigma.aGuess),  nrow=(n.dep), byrow=T),
beta=rnorm((n.dep), log(b0Guess), sigma.bGuess), # Version 1
theta = matrix(rep(1, n.dep * n.host),  nrow=(n.dep), byrow=T)
)
}
dat <- list(
count=count,
ins.sp = dep.sp.cnt.ind,
pl.sp = host.sp.count.ind,
Nobs = Nobs,
Nins = n.dep,
Npl.sp = n.host,
tm = matrix(trait.match, nrow=n.dep)
)
dat
dep.sp.cnt.ind
Nobs
n.dep
tm
matrix(trait.match, nrow=n.dep)
cat( ' model{
for (i in 1:Nobs) {
count[i] ~ dpois(mu.lambda[i])                               # obs count of dependent on host individual
mu.lambda[i] <- theta[ins.sp[i], pl.sp[i]] * lambda[i]       # mean count is interaction indicator times abundance
log(lambda[i]) <- beta[ins.sp[i]]                            # expected abundance on normal scale
}
for (j in 1:Nins) {
for (k in 1:Npl.sp) {
theta[j, k] ~ dbern(psi[j,k])                # binary interaction indicator
# tm[j,k] ~ dbern(omega)                      # matching indicator
lg.theta[j, k] <- psi[j, k]  * tm[j, k]      # interaction probability conditional on trait matching
logit(psi[j, k]) <- alpha[j, k]              # interaction probability on normal scale
alpha[j, k] ~ dnorm(alpha.0, sigma.a^-2)     # logit(interaction probability)
}
HB.invert[j] <- sum(theta[j, ])                # host breadth of dependent species
beta[j] ~ dnorm(beta.0, sigma.b^-2)            # log(abundance)
}
for (k in 1:Npl.sp){
ID.plant[k] <- sum(theta[ , k])                # calculate insect diversity of host species
}
alpha.mean ~ dunif(0, 1)                         # prior grand mean interaction probability
alpha.0 <- log(alpha.mean) - log(1-alpha.mean)   # interaction probability estimated on logit scale
beta.mean ~ dunif(0, 10)                         # prior distribution of grand mean abundance
beta.0 <- log(beta.mean) # abundance on a logarithmic scale
sigma.a ~ dt(0, 0.1, 1)T(0,100) # dunif(0,10) #  # standard deviation of interaction probability
sigma.b ~  dt(0, 0.1, 1)T(0,100) #dunif(0,10) # standard deviation of abundance
#   n0 <- sum(w[(n+1): (Nins) ]) # sums all
#    N <- n + n0 # species richness estimate
}', file=(modelfile <- tempfile()))
rep = 1000
dist_mean = 2
source("pred_reintro_functions.R")
getwd()
setwd("~/Dropbox/EEM general code/R EEM")
setwd("~/Dropbox/EEM general code/R EEM")
getwd()
source("pred_reintro_functions.R")
pred_reintro_general(dist_mean,rep)
pred_reintro_general()
?pred_reintro_general()
?pred_reintro_general
fname = paste('results_dmean_',toString(dist_mean),'_rep_',toString(rep),'.rds',sep='')
load(fname)
x<- read.csv("interactions.csv")  # x is now a data.frame
sppNames <- colnames(x)
# Added this to adjust marjinsback to default after as it's reset below
par(mar=c(5.1, 4,4.1 ,2.1))
#res_num = ceiling(runif(1,max=rep))
res_num = sample( 1:rep, 1)
n_s = dim(y_array)[2]
y1 = y_array[,2,res_num] # not sure why you left the first one off I've added it back in
y1 = y1 /y1[1]
Years = t_vec
plot(Years,y1, ylim=c(0, max(c(1,outcomes_abund[,res_num]))),type="l",ylab = "Relative abundance", col=1)
for (i in 3:n_s){
y = y_array[,i,res_num]
y = y /y[1]
# specify the colour using the col argument, each colour can be specified by a number
lines(t_vec,y, col=i)
print(y[length(y)])
}
# add a legend
vec.of.text.for.legend <- sppNames[-2]
legend('topleft', vec.of.text.for.legend, col=1:n_s, lty=1 )
# Chris, below is an example of how to do this without a for loop using the matplot()
# probably neater to delete the above and use this instead
traj.to.plot <- y_array[,,res_num]
# now do the normalization - this was a but tricky to work out but you can do it
# in one line as follows (e.g. see http://stackoverflow.com/questions/9447801/dividing-columns-by-colsums-in-r)
norm.traj.to.plot <- t(t(traj.to.plot)/traj.to.plot[1,])
norm.traj.to.plot <- norm.traj.to.plot [,-1] # remove the first col as per above
no.spp <- dim(norm.traj.to.plot)[2]
# Make the plot of all trajectories
matplot(norm.traj.to.plot, ylab = "Relative abundance", type = 'l', lty=1,
col=c(1:no.spp))#, main='new version with matplot()')
# add a legend
legend('topleft', vec.of.text.for.legend, col=1:no.spp, lty=1 )
# bar plots
# add this so the lables will fit in
par(mar=c(5.1, 8,4.1 ,2.1))
mean_outcomes = rowMeans(outcomes)
barplot(mean_outcomes[length(mean_outcomes):1],horiz=TRUE,xlim=c(0,1),
names.arg=sppNames[length(sppNames):3],
las=1,
main = "Equilibrium outcomes",xlab="Frequency of increase")
mean_outcomes = rowMeans(outcomes_dir)
barplot(mean_outcomes[length(mean_outcomes):1],horiz=TRUE,xlim=c(0,1),
names.arg=sppNames[length(sppNames):3],las=1,
main = "Initial changes",xlab="Frequency of increase")
rep = 1000
dist_mean = 2
source("pred_reintro_functions.R")
pred_reintro_general(dist_mean,rep)
sample(1:rep, 1)
intdata
intdata <- read.csv("interactions.csv")
rdata <- read.csv("growth_rate.csv")
data.matrix(intdata)
1:ncol(intdata)
intdata[1:nrow(intdata),2:ncol(intdata)]
intdata <- read.csv("interactions_test.csv")
data.matrix(intdata)
1:ncol(intdata)
intdata <- read.csv("interactions.csv")
r_guess = rdata[1:nrow(rdata),2]
rdata[1:nrow(rdata),2]
which(r_guess != "NA")
matrix(c(r_data_pos,r_guess[r_data_pos]),ncol=2)
r_guess = rdata[1:nrow(rdata),2]
r_data_pos = which(r_guess != "NA")
r_guess = matrix(c(r_data_pos,r_guess[r_data_pos]),ncol=2)
matrix(c(r_data_pos,r_guess[r_data_pos]),ncol=2)
nrow(intdata)
array(0,c(n_s,n_s,rep))
n_s = nrow(intdata)
A_array = array(0,c(n_s,n_s,rep))
r_array = matrix(0,n_s,rep)
t_vec = seq(from=0,to=25,by=0.1)
y_array = array(0,c(length(t_vec),n_s,rep))
sol_array = c(list(),rep)
outcomes = matrix(0,n_s-1,rep)
outcomes_abund = outcomes
outcomes_dir = outcomes
pred_prey_pair = generate_pred_prey_pairs(intdata)
pred_prey_pair = matrix(0,nrow(A)*ncol(A),2)
intdata
rep = 10
dist_mean = 2
source("pred_reintro_functions.R")
pred_reintro_general(dist_mean,rep)
mu.interaction <- 2 # mean interaction probability ; or -2.5 (for low)
sd.interaction <- 1 # standard deviation of interaction probability ;
mu.abund <- 0 # mean abundance of dependent or 0 (for low)
sd.abund <- 1 # standard deviation of abundance of dependent
# Dimensions of simulated networks
n.dep <- 10 # number of dependent species
n.host <- 5 # host species
n.coll <- 20 # number of observations per host species
#dep.sp <- rep(1: n.dep, each = n.host * n.coll)
#host.sp<- rep(rep(1: n.host, each = n.coll), times = n.dep)
coll <- rep(1: n.coll, rep((n.dep * n.host), n.coll))
Nobs <- n.dep * n.host * n.coll
# Attributes of species
crlla.lngth <- rep(NA, n.host)
probe.lngth <- rep(NA, n.dep)
trait.match <- rep(NA, times = (n.dep * n.host))
# Create empty vectors
abund <- rep(NA, times = n.dep) # mean abund of dependent spp
interaction.prob <- rep(NA, n.host *(n.dep)) # mean interaction on logit scale
x <- rep(NA, times = (n.dep *n.host)) # Pr(nteraction) : inv logit of interaction.prob
x1 <- rep(NA, times = (n.host *n.dep)) # binary interaction indicator
host.sp.ind <- rep(NA, times = (n.host *n.dep)) # track host species identity
dep.sp.ind <- rep(NA, times = (n.host *n.dep)) # tracks dependent species identity
interaction <- rep(NA, times = n.dep *n.host *n.coll) # realised interaction
exp.abund <- rep(NA, times = n.dep *n.host *n.coll) # expected abundance
host.sp.count.ind <- rep(NA, times = n.dep *n.host *n.coll)
dep.sp.cnt.ind <- rep(NA, times = n.dep *n.host * n.coll)
# Data simulation
for (l in 1:n.host) {
crlla.lngth[l] <- rnorm(1)  # set corrola length for trait matching
}
for (i in 1:n.dep) {
probe.lngth[i] <- rnorm(1)   # set proboscis length for trait matching
abund[i] <- rnorm(1, mean = mu.abund, sd = sd.abund)
for (l in 1:n.host) {
trait.match[i + (l - 1) * n.dep ] <- crlla.lngth[l] > probe.lngth[i] # The greater than sign should probably be reversed to make an interaction impossible when the corolla is longer than the bill
interaction.prob[i + (l - 1) * n.dep] <-  rnorm(1, mean = mu.interaction , sd = sd.interaction )
x[i + (l - 1) * n.dep ] <- trait.match[i + (l - 1) * n.dep ] * exp(interaction.prob[i+(l - 1) * n.dep]) / (1 + exp(interaction.prob[i + (l - 1) * n.dep]))  ## this is a simple binary match of traits
x1[i + (l - 1) * n.dep] <- rbinom(1, 1, x[i + (l - 1) * n.dep])
dep.sp.ind[i + (l - 1) * n.dep] <- i
host.sp.ind[i + (l - 1) * n.dep] <- l
for (m in 1:n.coll) {
interaction[i + (l - 1) * n.dep + (m - 1) * n.host * n.dep] <- x1[i + (l - 1) * n.dep]
exp.abund[i + (l - 1) * n.dep + (m - 1) * n.host * n.dep] <- rpois(1, lambda = exp(abund[i]))
dep.sp.cnt.ind[i + (l - 1) * n.dep + (m - 1) * n.host * n.dep] <- i
host.sp.count.ind[i + (l - 1) * n.dep + (m - 1) * n.host * n.dep] <- l
}
}
count <- exp.abund * interaction
}
library(R2jags)
inits = function() {
a0Guess = runif(1, .05,.4)
b0Guess = runif(1, .25,1)
sigma.aGuess =  runif(1,0,1.5) # uninformativ prior restricted to the range of 0 and 1.5 - why so low?
sigma.bGuess =  runif(1,0,1.5) # uninformativ prior restricted to the range of 0 and 1.5 - why so low?
installed.packages(R2jags)
installed.packages(R2jags)
install.packages("R2jags", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(R2jags)
inits = function() {
a0Guess = runif(1, .05,.4)
b0Guess = runif(1, .25,1)
sigma.aGuess =  runif(1,0,1.5) # uninformativ prior restricted to the range of 0 and 1.5 - why so low?
sigma.bGuess =  runif(1,0,1.5) # uninformativ prior restricted to the range of 0 and 1.5 - why so low?
list(alpha.mean=a0Guess, beta.mean=b0Guess,
sigma.a=sigma.aGuess, sigma.b=sigma.bGuess,
alpha=matrix(rnorm((n.dep* n.host), log(a0Guess/(1-a0Guess)), sigma.aGuess),  nrow=(n.dep), byrow=T),
beta=rnorm((n.dep), log(b0Guess), sigma.bGuess), # Version 1
theta = matrix(rep(1, n.dep * n.host),  nrow=(n.dep), byrow=T)
)
}
dat <- list(
count = count, # interaction frequencies
ins.sp = dep.sp.cnt.ind, # indicator for dependents
pl.sp = host.sp.count.ind, # indicator for hosts
Nobs = Nobs, # number of observations
Nins = n.dep, # number of dependents
Npl.sp = n.host, # number of hosts
tm = matrix(trait.match, nrow=n.dep) # trait match True/False matrix
)
cat( ' model{
for (i in 1:Nobs) {
count[i] ~ dpois(mu.lambda[i])                               # obs count of dependent on host individual
mu.lambda[i] <- theta[ins.sp[i], pl.sp[i]] * lambda[i]       # mean count is interaction indicator times abundance
log(lambda[i]) <- beta[ins.sp[i]]                            # expected abundance on normal scale
}
for (j in 1:Nins) {
for (k in 1:Npl.sp) {
theta[j, k] ~ dbern(psi[j,k])                # binary interaction indicator
# tm[j,k] ~ dbern(omega)                      # matching indicator
lg.theta[j, k] <- psi[j, k]  * tm[j, k]      # interaction probability conditional on trait matching
logit(psi[j, k]) <- alpha[j, k]              # interaction probability on normal scale
alpha[j, k] ~ dnorm(alpha.0, sigma.a^-2)     # logit(interaction probability)
}
HB.invert[j] <- sum(theta[j, ])                # host breadth of dependent species
beta[j] ~ dnorm(beta.0, sigma.b^-2)            # log(abundance)
}
for (k in 1:Npl.sp){
ID.plant[k] <- sum(theta[ , k])                # calculate insect diversity of host species
}
alpha.mean ~ dunif(0, 1)                         # prior grand mean interaction probability
alpha.0 <- log(alpha.mean) - log(1-alpha.mean)   # interaction probability estimated on logit scale
beta.mean ~ dunif(0, 10)                         # prior distribution of grand mean abundance
beta.0 <- log(beta.mean) # abundance on a logarithmic scale
sigma.a ~ dt(0, 0.1, 1)T(0,100) # dunif(0,10) #  # standard deviation of interaction probability
sigma.b ~  dt(0, 0.1, 1)T(0,100) #dunif(0,10) # standard deviation of abundance
#   n0 <- sum(w[(n+1): (Nins) ]) # sums all
#    N <- n + n0 # species richness estimate
}', file=(modelfile <- tempfile()))
SIMout <- jags(dat, inits = inits, c('alpha.mean','beta.mean', 'sigma.a', 'sigma.b', 'theta', 'beta', "HB.invert"),
modelfile, 3, 4000)
library("R2jags", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("rjags", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
SIMout <- jags(dat, inits = inits, c('alpha.mean','beta.mean', 'sigma.a', 'sigma.b', 'theta', 'beta', "HB.invert"),
modelfile, 3, 4000)
library(rjags)
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("rjags", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(rjags)
R
R()
source('C:/Users/uqcbake9/Dropbox/Botany/phillip_island_eem/run_pred_reintro.R', echo=TRUE)
rep = 1000
dist_mean = 2
source("pred_reintro_functions.R")
pred_reintro_general(dist_mean,rep)
rep = 1000
dist_mean = 1
source("pred_reintro_functions.R")
pred_reintro_general(dist_mean,rep)
source('C:/Users/uqcbake9/Dropbox/Botany/phillip_island_eem/run_pred_reintro.R', echo=TRUE)
source('C:/Users/uqcbake9/Dropbox/Botany/phillip_island_eem/run_pred_reintro.R', echo=TRUE)
source('C:/Users/uqcbake9/Dropbox/Botany/phillip_island_eem/run_pred_reintro.R', echo=TRUE)
source('C:/Users/uqcbake9/Dropbox/Botany/phillip_island_eem/run_pred_reintro.R', echo=TRUE)
source('C:/Users/uqcbake9/Dropbox/Botany/phillip_island_eem/run_pred_reintro.R', echo=TRUE)
source('C:/Users/uqcbake9/Dropbox/Botany/phillip_island_eem/run_pred_reintro.R', echo=TRUE)
source('C:/Users/uqcbake9/Dropbox/Botany/phillip_island_eem/run_pred_reintro.R', echo=TRUE)
source('C:/Users/uqcbake9/Dropbox/Botany/phillip_island_eem/run_pred_reintro.R', echo=TRUE)
